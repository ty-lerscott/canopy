name: Canopy

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # This ensures all history is fetched

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Check for changes
        id: check_for_changes
        run: |          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_SHA=${{ github.event.pull_request.base.sha }}
            HEAD_SHA=${{ github.event.pull_request.head.sha }}
          else
            BASE_SHA=$(git rev-parse HEAD^)
            HEAD_SHA=${{ github.sha }}
          fi
          
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA)
          echo "API_DIR_CHANGED=$(echo "$CHANGED_FILES" | grep -q "^src/api" && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "TOOLS_DIR_CHANGED=$(echo "$CHANGED_FILES" | grep -q "^src/tools" && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "UTILS_DIR_CHANGED=$(echo "$CHANGED_FILES" | grep -q "^src/utils" && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "APPS_DIR_CHANGED=$(echo "$CHANGED_FILES" | grep -q "^src/apps" && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "PACKAGE_JSON_CHANGED=$(echo "$CHANGED_FILES" | grep -q "^package.json$" && echo "true" || echo "false")" >> $GITHUB_OUTPUT

      - name: Install dependencies
        if: |
          steps.check_for_changes.outputs.API_DIR_CHANGED == 'true' ||
          steps.check_for_changes.outputs.TOOLS_DIR_CHANGED == 'true' ||
          steps.check_for_changes.outputs.UTILS_DIR_CHANGED == 'true' ||
          steps.check_for_changes.outputs.APPS_DIR_CHANGED == 'true' ||
          steps.check_for_changes.outputs.PACKAGE_JSON_CHANGED == 'true'
        run: npm i

      - name: Build API
        env:
          BLUR: ${{ secrets.BLUR }}
          PORT: ${{ secrets.PORT }}
          API_KEY: ${{ secrets.API_KEY }}
          APP_ENV: ${{ secrets.APP_ENV }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          SENTRY_URL: ${{ secrets.SENTRY_URL }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        if: |
          steps.check_for_changes.outputs.API_DIR_CHANGED == 'true' ||
          steps.check_for_changes.outputs.TOOLS_DIR_CHANGED == 'true' ||
          steps.check_for_changes.outputs.UTILS_DIR_CHANGED == 'true' || 
          steps.check_for_changes.outputs.PACKAGE_JSON_CHANGED == 'true'
        run: |
          BLUR=${{ secrets.BLUR }} PORT=${{ secrets.PORT }} API_KEY=${{ secrets.API_KEY }}
          APP_ENV=${{ secrets.APP_ENV }} NODE_ENV=${{ secrets.NODE_ENV }} SENTRY_URL=${{ secrets.SENTRY_URL }}
          SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}
          
          npm run build:ts

      - name: Build Apps
        if: steps.check_for_changes.outputs.APPS_DIR_CHANGED == 'true'
        run: npm run build:apps


      - name: Deploy with rsync w/ node_modules
        uses: burnett01/rsync-deployments@5.2.1
        if: steps.check_for_changes.outputs.PACKAGE_JSON_CHANGED == 'true'
        with:
          switches: -avzc --exclude="src/apps/app" --exclude=".git*" --exclude=".env.default" --exclude="biome.json" --exclude="src/api" --exclude="src/tools" --exclude="src/types" --exclude="src/utils"
          path: ./
          remote_path: ${{ secrets.TARGET_DIR }}
          remote_host: ${{ secrets.HOST }}
          remote_user: ${{ secrets.USER }}
          remote_key: ${{ secrets.SSH_KEY }}
          
      - name: Deploy with rsync
        uses: burnett01/rsync-deployments@5.2.1
        if: steps.check_for_changes.outputs.PACKAGE_JSON_CHANGED == 'false'
        with:
          switches: -avzc --exclude="src/apps/app" --exclude=".git*" --exclude=".env.default" --exclude="biome.json" --exclude="node_modules" --exclude="src/api" --exclude="src/tools" --exclude="src/types" --exclude="src/utils"
          path: ./
          remote_path: ${{ secrets.TARGET_DIR }}
          remote_host: ${{ secrets.HOST }}
          remote_user: ${{ secrets.USER }}
          remote_key: ${{ secrets.SSH_KEY }}