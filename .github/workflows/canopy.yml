name: Deploy Canopy

on:
  workflow_run:
    workflows: [ "Deploy API" ]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      BLUR: ${{ secrets.BLUR }}
      APP_ENV: ${{ secrets.APP_ENV }}
      NODE_ENV: ${{ secrets.NODE_ENV }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
    steps:
      - name: Set Start Time
        run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm i
      #
      - name: Build application
        run: PORT=${{ secrets.PORT }} APP_ENV=${{ secrets.APP_ENV }} npm run build

      - name: Bundle files for transfer
        run: |
          tar -czf ${{ secrets.BUNDLE_NAME }} src public node_modules package.json next.config.mjs postcss.config.mjs tailwind.config.ts tsconfig.json tsup.config.ts;

      - name: SCP file transfer
        uses: nogsantos/scp-deploy@master
        with:
          src: ${{ secrets.BUNDLE_NAME }}
          host: ${{ secrets.HOST }}
          remote: ${{ secrets.TARGET_DIR }}
          port: 22
          user: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}

      - name: Unpack Bundle
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            cd ${{ secrets.TARGET_DIR }};
            tar -xzf ${{ secrets.BUNDLE_NAME }};
            rm ${{ secrets.BUNDLE_NAME }};
            pm2 restart canopy

      - name: Calculate Build Time
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          
          HOURS=$((DURATION / 3600))
          MINUTES=$(( (DURATION % 3600) / 60 ))
          SECONDS=$((DURATION % 60))
          
          echo "Build completed in ${HOURS}h ${MINUTES}m ${SECONDS}s"
          echo "BUILD_TIME=${HOURS}h ${MINUTES}m ${SECONDS}s" >> $GITHUB_ENV

      - name: Notify Discord - Success
        if: ${{ success() }}
        run: |
          npm run discord -- \
            --url ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }} \
            --title "${{ github.event.head_commit.message }}" \
            --author.url https://github.com/${{ github.actor }} \
            --author.name ${{ github.actor }} \
            --author.avatar ${{ github.event.sender.avatar_url }} \
            --field "Branch%${{ github.ref }}%true" \
            --field "Build Duration%${{ env.BUILD_TIME }}%true" \
            --footer.value ${{ github.sha }} \
            --level success \
            --description "ðŸŽ‰ ${{ github.repository }} deployed ðŸŽ‰"

      - name: Notify Discord - Failure
        if: ${{ failure() }}
        run: |
          npm run discord -- \
            --url ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }} \
            --title "${{ github.event.head_commit.message }}" \
            --author.url https://github.com/${{ github.actor }} \
            --author.name ${{ github.actor }} \
            --author.avatar ${{ github.event.sender.avatar_url }} \
            --field "Branch%${{ github.ref }}%true" \
            --field "Build Duration%${{ env.BUILD_TIME }}%true" \
            --footer.value ${{ github.sha }} \
            --level critical \
            --description "ðŸš¨ ${{ github.repository }} build failed ðŸš¨"
