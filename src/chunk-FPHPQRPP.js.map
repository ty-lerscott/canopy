{"version":3,"sources":["api/image/utils/get-image.ts"],"sourcesContent":["import { logger } from \"@/api/logger\";\nimport env from \"@/tools/dotenv-config.mjs\";\nimport type { GetResponse } from \"@/types\";\nimport jimp from \"jimp\";\n\ntype JimpImage = GetResponse & {\n\tdata?: Buffer;\n\twidth: number;\n\theight: number;\n\terror?: string;\n};\n\nconst DEFAULT_IMAGE: JimpImage = {\n\twidth: 0,\n\theight: 0,\n\tstatus: 400,\n};\n\nconst BLUR_AMOUNT = Number(env.BLUR) || 10;\n\nconst getImage = async (url: string): Promise<JimpImage> => {\n\tif (!url) {\n\t\treturn Promise.resolve(DEFAULT_IMAGE);\n\t}\n\n\tconst decoded = decodeURIComponent(url).replace(/[\"\\/]$/, \"\");\n\n\ttry {\n\t\tconst image = await jimp.read(decoded);\n\n\t\timage.blur(BLUR_AMOUNT);\n\n\t\tDEFAULT_IMAGE.data = await image.getBufferAsync(jimp.MIME_PNG);\n\t\tDEFAULT_IMAGE.width = image.getWidth();\n\t\tDEFAULT_IMAGE.height = image.getHeight();\n\t\tDEFAULT_IMAGE.status = 200;\n\t} catch (error) {\n\t\tconst err = error as Error;\n\t\tlogger.error(err.message);\n\t\tDEFAULT_IMAGE.error = err.message;\n\t\tDEFAULT_IMAGE.status = 500;\n\t}\n\n\treturn DEFAULT_IMAGE;\n};\n\nexport default getImage;\n"],"mappings":"gFAGA,OAAOA,MAAU,OASjB,IAAMC,EAA2B,CAChC,MAAO,EACP,OAAQ,EACR,OAAQ,GACT,EAEMC,EAAc,OAAOC,EAAI,IAAI,GAAK,GAElCC,EAAW,MAAOC,GAAoC,CAC3D,GAAI,CAACA,EACJ,OAAO,QAAQ,QAAQJ,CAAa,EAGrC,IAAMK,EAAU,mBAAmBD,CAAG,EAAE,QAAQ,SAAU,EAAE,EAE5D,GAAI,CACH,IAAME,EAAQ,MAAMP,EAAK,KAAKM,CAAO,EAErCC,EAAM,KAAKL,CAAW,EAEtBD,EAAc,KAAO,MAAMM,EAAM,eAAeP,EAAK,QAAQ,EAC7DC,EAAc,MAAQM,EAAM,SAAS,EACrCN,EAAc,OAASM,EAAM,UAAU,EACvCN,EAAc,OAAS,GACxB,OAASO,EAAO,CACf,IAAMC,EAAMD,EACZE,EAAO,MAAMD,EAAI,OAAO,EACxBR,EAAc,MAAQQ,EAAI,QAC1BR,EAAc,OAAS,GACxB,CAEA,OAAOA,CACR,EAEOU,EAAQP","names":["jimp","DEFAULT_IMAGE","BLUR_AMOUNT","dotenv_config_default","getImage","url","decoded","image","error","err","logger","get_image_default"]}