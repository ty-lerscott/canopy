{"version":3,"sources":["server.ts","../../sentry.mjs"],"sourcesContent":["import { dirname, resolve } from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport APIController from \"@/api/controllers\";\nimport { omit } from \"@/api/utils\";\nimport env from \"@/tools/dotenv-config.mjs\";\nimport \"~/sentry.mjs\";\nimport * as Sentry from \"@sentry/node\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport express, { type Request, type Response } from \"express\";\nimport next from \"next\";\nimport LoggerController from \"./logger\";\n\nconst IS_LOCAL = env.NODE_ENV === \"development\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst appsDir = resolve(__dirname, \"..\", IS_LOCAL ? \"\" : \"../src\", \"apps\");\nconst server = express();\nconst app = next({ dev: IS_LOCAL, dir: appsDir });\nconst nextHandler = app.getRequestHandler();\n\nSentry.setupExpressErrorHandler(server);\n\nconst Server = {\n\tapp,\n\tasync start() {\n\t\tawait this.app.prepare();\n\n\t\tserver.use(\n\t\t\tbodyParser.urlencoded({\n\t\t\t\textended: true,\n\t\t\t}),\n\t\t);\n\t\tserver.use(express.urlencoded({ extended: false }));\n\t\tserver.use((req, res, next) => {\n\t\t\treq.method = req.method.toUpperCase();\n\n\t\t\treq.query = omit(req.query, [\n\t\t\t\t\"auto\",\n\t\t\t\t\"w\",\n\t\t\t\t\"fit\",\n\t\t\t\t\"ixlib\",\n\t\t\t\t\"ixid\",\n\t\t\t]) as Record<string, string>;\n\n\t\t\tnext();\n\t\t});\n\n\t\tserver.use(bodyParser.json());\n\t\tserver.use(cors());\n\t\tserver.use(LoggerController);\n\t\tserver.use(\"/_next\", express.static(resolve(__dirname, \".next\")));\n\n\t\tserver.use((req, res, next) => {\n\t\t\tconst isImageResource = req.url.match(/\\/(images)\\//);\n\n\t\t\tif (isImageResource) {\n\t\t\t\tconst newUrl = req.url.substring(\n\t\t\t\t\tisImageResource.index as number,\n\t\t\t\t\treq.url.length,\n\t\t\t\t);\n\t\t\t\treq.url = newUrl;\n\t\t\t\treq.originalUrl = newUrl;\n\n\t\t\t\texpress.static(\"public\")(req, res, next);\n\t\t\t} else {\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\n\t\t// Handle API requests\n\t\tserver.use(APIController);\n\n\t\t// Handle All other GET requests through the next handler\n\t\tserver.get(\"*\", (req: Request, res: Response) => {\n\t\t\treturn nextHandler(req, res);\n\t\t});\n\n\t\tserver.listen(env.PORT, (err?: Error) => {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log(`> Ready on http://localhost:${env.PORT}`);\n\t\t});\n\t},\n};\n\n(async () => {\n\tawait Server.start();\n})();\n","import * as Sentry from \"@sentry/node\";\nimport { nodeProfilingIntegration } from \"@sentry/profiling-node\";\nimport env from \"./src/tools/dotenv-config.mjs\";\n\nSentry.init({\n\tdsn: env.SENTRY_URL,\n\tintegrations: [nodeProfilingIntegration()],\n\t// Performance Monitoring\n\ttracesSampleRate: 1.0, //  Capture 100% of the transactions\n\n\t// Set sampling rate for profiling - this is relative to tracesSampleRate\n\tprofilesSampleRate: 1.0,\n});\n"],"mappings":"ulBAAA,OAAS,WAAAA,EAAS,WAAAC,MAAe,OACjC,OAAS,iBAAAC,MAAqB,MCD9B,UAAYC,MAAY,eACxB,OAAS,4BAAAC,MAAgC,yBAGlC,OAAK,CACX,IAAKC,EAAI,WACT,aAAc,CAACC,EAAyB,CAAC,EAEzC,iBAAkB,EAGlB,mBAAoB,CACrB,CAAC,EDND,UAAYC,MAAY,eACxB,OAAOC,MAAgB,cACvB,OAAOC,MAAU,OACjB,OAAOC,MAA8C,UACrD,OAAOC,MAAU,OAGjB,IAAMC,EAAWC,EAAI,WAAa,cAC5BC,EAAaC,EAAc,YAAY,GAAG,EAC1CC,EAAYC,EAAQH,CAAU,EAC9BI,EAAUC,EAAQH,EAAW,KAAMJ,EAAW,GAAK,SAAU,MAAM,EACnEQ,EAASC,EAAQ,EACjBC,EAAMC,EAAK,CAAE,IAAKX,EAAU,IAAKM,CAAQ,CAAC,EAC1CM,EAAcF,EAAI,kBAAkB,EAEnC,2BAAyBF,CAAM,EAEtC,IAAMK,EAAS,CACd,IAAAH,EACA,MAAM,OAAQ,CACb,MAAM,KAAK,IAAI,QAAQ,EAEvBF,EAAO,IACNM,EAAW,WAAW,CACrB,SAAU,EACX,CAAC,CACF,EACAN,EAAO,IAAIC,EAAQ,WAAW,CAAE,SAAU,EAAM,CAAC,CAAC,EAClDD,EAAO,IAAI,CAACO,EAAKC,EAAKL,IAAS,CAC9BI,EAAI,OAASA,EAAI,OAAO,YAAY,EAEpCA,EAAI,MAAQE,EAAKF,EAAI,MAAO,CAC3B,OACA,IACA,MACA,QACA,MACD,CAAC,EAEDJ,EAAK,CACN,CAAC,EAEDH,EAAO,IAAIM,EAAW,KAAK,CAAC,EAC5BN,EAAO,IAAIU,EAAK,CAAC,EACjBV,EAAO,IAAIW,CAAgB,EAC3BX,EAAO,IAAI,SAAUC,EAAQ,OAAOF,EAAQH,EAAW,OAAO,CAAC,CAAC,EAEhEI,EAAO,IAAI,CAACO,EAAKC,EAAKL,IAAS,CAC9B,IAAMS,EAAkBL,EAAI,IAAI,MAAM,cAAc,EAEpD,GAAIK,EAAiB,CACpB,IAAMC,EAASN,EAAI,IAAI,UACtBK,EAAgB,MAChBL,EAAI,IAAI,MACT,EACAA,EAAI,IAAMM,EACVN,EAAI,YAAcM,EAElBZ,EAAQ,OAAO,QAAQ,EAAEM,EAAKC,EAAKL,CAAI,CACxC,MACCA,EAAK,CAEP,CAAC,EAGDH,EAAO,IAAIc,CAAa,EAGxBd,EAAO,IAAI,IAAK,CAACO,EAAcC,IACvBJ,EAAYG,EAAKC,CAAG,CAC3B,EAEDR,EAAO,OAAOP,EAAI,KAAOsB,GAAgB,CACxC,GAAIA,EAAK,MAAMA,EACf,QAAQ,IAAI,+BAA+BtB,EAAI,IAAI,EAAE,CACtD,CAAC,CACF,CACD,GAEC,SACA,MAAMY,EAAO,MAAM","names":["dirname","resolve","fileURLToPath","Sentry","nodeProfilingIntegration","dotenv_config_default","nodeProfilingIntegration","Sentry","bodyParser","cors","express","next","IS_LOCAL","dotenv_config_default","__filename","fileURLToPath","__dirname","dirname","appsDir","resolve","server","express","app","next","nextHandler","Server","bodyParser","req","res","omit","cors","logger_default","isImageResource","newUrl","controllers_default","err"]}