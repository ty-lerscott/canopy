{"version":3,"sources":["api/logger.ts"],"sourcesContent":["import type { NextFunction, Request, Response } from \"express\";\nimport omit from \"object.omit\";\nimport winston from \"winston\";\n\nexport const logger = winston.createLogger({\n\tlevel: \"info\",\n\tformat: winston.format.json(),\n\ttransports: [\n\t\tnew winston.transports.Console(),\n\t\tnew winston.transports.File({\n\t\t\tfilename: \"./logs/error.log\",\n\t\t\tlevel: \"error\",\n\t\t}),\n\t\tnew winston.transports.File({ filename: \"./logs/combined.log\" }),\n\t],\n});\n\nconst LoggerController = (req: Request, res: Response, next: NextFunction) => {\n\tconst query = omit(req.query, [\"auto\", \"w\", \"fit\", \"ixlib\", \"ixid\"]);\n\tconst hasQuery = Object.values(query).some(Boolean);\n\tconst url = req.url.split(\"?\")[0];\n\n\tif (!/^\\/(monitoring|_next)/.test(url)) {\n\t\tlogger.info(`${req.method} ${url}`, hasQuery && { query });\n\t}\n\n\tnext();\n};\n\nexport default LoggerController;\n"],"mappings":"AACA,OAAOA,MAAU,cACjB,OAAOC,MAAa,UAEb,IAAMC,EAASD,EAAQ,aAAa,CAC1C,MAAO,OACP,OAAQA,EAAQ,OAAO,KAAK,EAC5B,WAAY,CACX,IAAIA,EAAQ,WAAW,QACvB,IAAIA,EAAQ,WAAW,KAAK,CAC3B,SAAU,mBACV,MAAO,OACR,CAAC,EACD,IAAIA,EAAQ,WAAW,KAAK,CAAE,SAAU,qBAAsB,CAAC,CAChE,CACD,CAAC,EAEKE,EAAmB,CAACC,EAAcC,EAAeC,IAAuB,CAC7E,IAAMC,EAAQP,EAAKI,EAAI,MAAO,CAAC,OAAQ,IAAK,MAAO,QAAS,MAAM,CAAC,EAC7DI,EAAW,OAAO,OAAOD,CAAK,EAAE,KAAK,OAAO,EAC5CE,EAAML,EAAI,IAAI,MAAM,GAAG,EAAE,CAAC,EAE3B,wBAAwB,KAAKK,CAAG,GACpCP,EAAO,KAAK,GAAGE,EAAI,MAAM,IAAIK,CAAG,GAAID,GAAY,CAAE,MAAAD,CAAM,CAAC,EAG1DD,EAAK,CACN,EAEOI,EAAQP","names":["omit","winston","logger","LoggerController","req","res","next","query","hasQuery","url","logger_default"]}